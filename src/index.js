const getCase = require("./comporte/getCase");
const getCases = require("./comporte/getCases");
const getArrayIndex = require("./utils/getArrayIndex");
const getCaseNumbersInserted = require("./utils/getCaseNumbersInserted");
const getCasePage = require("./utils/getCasePage");
const insertLog = require("./utils/insertLog");
const putTicketIdInDatabaseRecord = require("./utils/putTicketIdInDatabaseRecord");
const sendCaseToZendesk = require("./utils/sendCaseToZendesk");
const updateArrayIndex = require("./utils/updateArrayIndex");
const updateCasePage = require("./utils/updateCasePage");
const deleteTicket = require("./zendesk/deleteTicket");
const findTicket = require("./zendesk/findTicket");

const init = async () => {
  // obtem os casos
  // const casePage = getCasePage();
  const casePage = null;
  const caseNumbers = [
    "00226260",
    "00281073",
    "00317216",
    "00331988",
    "00334097",
    "00334781",
    "00334829",
    "00335003",
    "00337162",
    "00339744",
    "00341814",
    "00359516",
    "00350314",
    "00371008",
    "00371232",
    "00353977",
    "00354179",
    "00371611",
    "00372643",
    "00373186",
    "00373828",
    "00379199",
    "00382763",
    "00385178",
    "00407756",
    "00407986",
    "00408835",
    "00408915",
    "00410072",
    "00411327",
    "00410086",
    "00411741",
    "00414913",
    "00417712",
    "00417704",
    "00418085",
    "00390624",
    "00397906",
    "00399856",
    "00402271",
    "00434733",
    "00436079",
    "00436334",
    "00436424",
    "00436481",
    "00436839",
    "00420799",
    "00421457",
    "00439435",
    "00422100",
    "00424681",
    "00427857",
    "00426753",
    "00448572",
    "00448531",
    "00456551",
    "00456728",
    "00456799",
    "00457600",
    "00457844",
    "00460141",
    "00460384",
    "00461584",
    "00464068",
    "00464377",
    "00465883",
    "00466796",
    "00485466",
    "00485445",
    "00486065",
    "00486026",
    "00486064",
    "00486111",
    "00490354",
    "00469857",
    "00473035",
    "00471696",
    "00473608",
    "00474508",
    "00475265",
    "00502495",
    "00502842",
    "00503025",
    "00505405",
    "00506707",
    "00507663",
    "00507953",
    "00508319",
    "00508532",
    "00535370",
    "00537551",
    "00517871",
    "00517879",
    "00517882",
    "00539599",
    "00539680",
    "00539609",
    "00539622",
    "00542222",
    "00542251",
    "00519354",
    "00523356",
    "00525884",
    "00524389",
    "00525911",
    "00527334",
    "00552695",
    "00552710",
    "00556175",
    "00561648",
    "00562006",
    "00564644",
    "00563673",
    "00565232",
    "00565309",
    "00565600",
    "00564517",
    "00566017",
    "00566204",
    "00566229",
    "00566230",
    "00566195",
    "00566501",
    "00567304",
    "00585534",
    "00585973",
    "00586336",
    "00586325",
    "00586355",
    "00587150",
    "00587140",
    "00589838",
    "00590056",
    "00590063",
    "00590059",
    "00590072",
    "00591504",
    "00593686",
    "00595402",
    "00595474",
    "00598398",
    "00601403",
    "00601729",
    "00601127",
    "00601205",
    "00601177",
    "00601129",
    "00601252",
    "00570265",
    "00570332",
    "00573540",
    "00576939",
    "00577132",
    "00575907",
    "00575909",
    "00575913",
    "00575911",
    "00576735",
    "00580781",
    "00579686",
    "00581686",
    "00582260",
    "00622835",
    "00623019",
    "00627622",
    "00627676",
    "00626529",
    "00626389",
    "00628696",
    "00627342",
    "00629289",
    "00631529",
    "00630733",
    "00632576",
    "00635544",
    "00635721",
    "00639703",
    "00607426",
    "00606228",
    "00608999",
    "00617005",
    "00641772",
    "00642074",
    "00642672",
    "00647429",
    "00649924",
    "00660000",
    "00660394",
    "00655577",
    "00663465",
    "00658777",
    "00664239",
    "00664836",
    "00670092",
    "00670520",
    "00670543",
    "00670550",
    "00671496",
    "00673161",
    "00674033",
    "00678276",
    "00676852",
    "00678875",
    "00678955",
    "00679054",
    "00688038",
    "00692701",
    "00693964",
    "00694259",
    "00718955",
    "00719098",
    "00719236",
    "00721081",
    "00704036",
    "00703982",
    "00703465",
    "00705363",
    "00705642",
    "00734457",
    "00737482",
    "00741614",
    "00742899",
    "00745062",
    "00760027",
    "00809204",
    "00809895",
    "00773242",
    "00776468",
    "00825670",
    "00778951",
    "00784111",
    "00786055",
    "00830530",
    "00830617",
    "00830606",
    "00831783",
    "00831610",
    "00835917",
    "00835924",
    "00835234",
    "00848747",
    "00848838",
    "00852686",
    "00856709",
    "00860760",
    "00860785",
    "00862034",
    "00862447",
    "00863009",
    "00863080",
    "00868630",
    "00869196",
    "00869350",
    "00871570",
    "00868137",
    "00871579",
    "00868202",
    "00868191",
    "00868145",
    "00868165",
    "00871866",
    "00873172",
    "00876157",
    "00876169",
    "00877173",
    "00879086",
    "00879201",
    "00880260",
    "00884923",
    "00884957",
    "00886311",
    "00916871",
    "00919559",
    "00920472",
    "00896789",
    "00897072",
    "00900356",
    "00926414",
    "00932271",
    "00930598",
    "00909550",
    "00909114",
    "00909081",
    "00909810",
    "00933178",
    "00934861",
    "00911327",
    "00916009",
    "00971951",
    "00972410",
    "00974293",
    "00975309",
    "00937426",
    "00937456",
    "00937802",
    "00956410",
    "00956673",
    "00975432",
    "00990751",
    "00990846",
    "00993835",
    "00992250",
    "00999022",
    "00999724",
    "01001325",
    "01007078",
    "01008126",
    "01009850",
    "01015341",
    "01015255",
    "01028357",
    "01035606",
    "01039538",
    "01060976",
    "01039545",
    "01042454",
    "01040827",
    "01040888",
    "01062913",
    "01073761",
    "01074224",
    "01073476",
    "01075926",
    "01079155",
    "01079782",
    "01095395",
    "01095940",
    "01099700",
    "01107059",
    "01112440",
    "01114108",
    "01128273",
    "01128662",
    "01128841",
    "01130797",
    "01129320",
    "01129792",
    "01131802",
    "01153777",
    "01155218",
    "01157271",
    "01157299",
    "01157349",
    "01157371",
    "01157664",
    "01159904",
    "01163038",
    "01166441",
    "01138008",
    "01138033",
    "01137925",
    "01138438",
    "01145349",
    "01149172",
    "01151870",
    "01153246",
    "01169901",
    "01172850",
    "01173330",
    "01173767",
    "01175280",
    "01180781",
    "01181332",
    "01181472",
    "01184093",
    "01184698",
    "01182577",
    "01182742",
    "01187154",
    "01189458",
    "01189819",
    "01193795",
    "01199720",
    "01200571",
    "01200869",
    "01202956",
    "01203084",
    "01204158",
    "01204379",
    "01211511",
    "01213528",
    "01216054",
    "01218840",
    "01222024",
    "01222052",
    "01222029",
    "01222140",
    "01225797",
    "01226903",
    "01227202",
    "01228050",
    "01232564",
    "01236968",
    "01236962",
    "01239661",
    "01238537",
    "01240679",
    "01244078",
    "01246268",
    "01245579",
    "01252089",
    "01252151",
    "01253242",
    "01253743",
    "01257228",
    "01257233",
    "01257599",
    "01257589",
    "01260475",
    "01259129",
    "01264983",
    "01265890",
    "01266586",
    "01266707",
    "01267247",
    "01271505",
    "01272928",
    "01275978",
    "01285387",
    "01285490",
    "01302242",
    "01287056",
    "01304650",
    "01288041",
    "01307776",
    "01308355",
    "01293759",
    "01296753",
    "01313774",
    "01299004",
    "01300176",
    "01327779",
    "01333360",
    "01337694",
    "01337859",
    "01340855",
    "01340978",
    "01316862",
    "01321993",
    "01348221",
    "01350219",
    "01357106",
    "01359725",
    "01360062",
    "01360195",
    "01360751",
    "01361197",
    "01362954",
    "01361796",
    "01362258",
    "01364756",
    "01367433",
    "01355930",
    "01378412",
    "01379396",
    "01399541",
    "01401680",
    "01402918",
    "01404774",
    "01404894",
    "01406888",
    "01407216",
    "01381924",
    "01387874",
    "01392641",
    "01393034",
    "01413506",
    "01416729",
    "01415230",
    "01425911",
    "01426975",
    "01430024",
    "01431747",
    "01433097",
    "01434143",
    "01438957",
    "01439794",
    "01443815",
    "01452893",
    "01450080",
    "01450819",
    "01451107",
    "01452241",
    "01455319",
    "01456772",
    "01442089",
    "01458059",
    "01458657",
    "01459332",
    "01459549",
    "01469067",
    "01469090",
    "01470955",
    "01480771",
    "01475022",
    "01475491",
    "01487166",
    "01487487",
    "01488634",
    "01496221",
    "01498801",
    "01503562",
    "01500844",
    "01507801",
    "01511390",
    "01514980",
    "01515987",
    "01519183",
    "01519199",
    "01519247",
    "01516379",
    "01519240",
    "01519238",
    "01516517",
    "01519547",
    "01519603",
    "01519589",
    "01519641",
    "01519628",
    "01519597",
    "01522685",
    "01522918",
    "01525992",
    "01526035",
    "01523164",
    "01526047",
    "01526022",
    "01526104",
    "01525984",
    "01526051",
    "01526102",
    "01526085",
    "01526054",
    "01526114",
    "01525996",
    "01525999",
    "01526038",
    "01526360",
    "01523736",
    "01523993",
    "01524015",
    "01525147",
    "01525299",
    "01525311",
    "01525218",
    "01525363",
    "01527642",
    "01528003",
    "01527900",
    "01527906",
    "01527919",
    "01528046",
    "01529164",
    "01529342",
    "01529766",
    "01531357",
    "01531642",
    "01531950",
    "01531992",
    "01531928",
    "01532441",
    "01536231",
    "01536195",
    "01536224",
    "01536170",
    "01536361",
    "01536452",
    "01536603",
    "01537857",
    "01535710",
    "01538486",
    "01539050",
    "01540058",
    "01540367",
    "01542370",
    "01542841",
    "01542897",
    "01542961",
    "01540904",
    "01543289",
    "01546725",
    "01547176",
    "01546273",
    "01550555",
    "01550661",
    "01553103",
    "01551979",
    "01556456",
    "01556406",
    "01554438",
    "01556890",
    "01555084",
    "01557534",
    "01555166",
    "01557575",
    "01557872",
    "01558230",
    "01558236",
    "01559108",
    "01563072",
    "01559848",
    "01563846",
    "01564578",
    "01564618",
    "01564851",
    "01564895",
    "01568922",
    "01569244",
    "01567173",
    "01567684",
    "01570901",
    "01571689",
    "01575489",
    "01580520",
    "01584337",
    "01584302",
    "01589880",
    "01590070",
    "01590219",
    "01590276",
    "01588059",
    "01603343",
    "01603549",
    "01603990",
    "01609300",
    "01619078",
    "01620113",
    "01623729",
    "01624199",
    "01626034",
    "01629762",
    "01629769",
    "01630116",
    "01627670",
    "01635104",
    "01640978",
    "01641261",
    "01641622",
    "01642042",
    "01642081",
    "01644262",
    "01657948",
    "01655170",
    "01658730",
    "01655772",
    "01660571",
    "01663342",
    "01663526",
    "01663923",
    "01661253",
    "01661440",
    "01661455",
    "01666258",
    "01666259",
    "01666640",
    "01666681",
    "01671341",
    "01675399",
  ];

  if (casePage) {
    console.log(`Obtendo os casos da página ${casePage}...`);
    const options = {
      subject: "Call Back - Call Back",
    };
    const cases = await getCases(casePage, 100, options);

    if (!cases?.length) {
      console.log(`Nenhum caso encontrado na página ${casePage}.`);
      process.exit(0);
    }

    // obtem o numero dos casos
    const _caseNumbers = cases?.map((c) => c.CASENUMBER);
    if (_caseNumbers?.length) {
      caseNumbers.push(..._caseNumbers);
    }
  }

  const caseNumbersInserted = getCaseNumbersInserted();
  const arrayIndex = getArrayIndex();

  // itera sobre os casos
  for (let i = 0; i < caseNumbers?.length || 0; i++) {
    const caseNumber = caseNumbers[i];

    if (caseNumbersInserted?.includes(caseNumber)) {
      console.log(`Caso ${caseNumber} já inserido!`);
      continue;
    }

    // checa se o ticket ja existe na zendesk
    console.log(`Verificando existência do caso ${caseNumber} na Zendesk...`);
    const [foundTicket, ...rest] = await findTicket(caseNumber);
    if (foundTicket) {
      console.log(
        `Caso ${caseNumber} já presente na Zendesk (ticket ${foundTicket.id}).`
      );

      if (rest.length) {
        insertLog(
          {
            error: `Caso ${caseNumber} duplicado na Zendesk!`,
            case: caseNumber,
          },
          true
        );
      }

      continue;
    }

    console.log(
      `Obtendo o caso ${caseNumber} (${i + 1}/${caseNumbers.length})...`
    );
    const foundCase = await getCase(caseNumber);

    if (!foundCase) {
      console.log(`Caso ${caseNumber} não encontrado!`);
      insertLog(
        {
          error: `Caso ${caseNumber} não encontrado!`,
          case: caseNumber,
        },
        true
      );
      continue;
    }
    try {
      console.log(`Enviando o caso ${foundCase.CASENUMBER} para a Zendesk...`);
      const ticketId = await sendCaseToZendesk(foundCase);

      // atualiza o registro no banco de dados com o id do ticket
      await putTicketIdInDatabaseRecord(foundCase.ID, ticketId);

      // registra o log da inserção
      insertLog({ case: foundCase.CASENUMBER, ticket_id: ticketId });

      // atualiza no log o index do array do proximo caso em arquivo
      // updateArrayIndex(i + 1);
    } catch (error) {
      if (Object.keys(error).length) {
        if (error.ticket_id) {
          // deletar o ticket na zendesk
          console.log(`Deletando o ticket ${error.ticket_id} na Zendesk...`);
          try {
            await deleteTicket(error.ticket_id);
          } catch (error) {
            insertLog({ ...error, case: caseNumber, page: casePage }, true);
          }
        } else {
          insertLog({ ...error, case: caseNumber, page: casePage }, true);
        }
      } else {
        console.log(error);
        insertLog({ error, case: caseNumber, page: casePage }, true);
      }
    }
  }

  // atualiza no log com a proxima pagina de busca de casos
  if (casePage) {
    updateCasePage(casePage + 1);
    init();
  }
};

init();
